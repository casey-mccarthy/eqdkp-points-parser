name: Release

on:
  push:
    branches:
      - main  # Automatically trigger on push to the 'main' branch

permissions:
  contents: write  # Required for GitHub to push changes, create tags, and release versions

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Generate Changelog and Determine New Version
      - name: Generate Changelog and Bump Version
        id: changelog
        uses: TriPSs/conventional-changelog-action@v6.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          preset: angular  # Uses 'angular' style commits (feat, fix, etc.)
          outputFile: CHANGELOG.md  # Write changelog to this file
          versionFile: ./package.json  # Bumps version in package.json (optional)
          versionPath: version  # Changes the version field in package.json
          skipEmptyRelease: true  # Skips the release if no changes exist
          tagPrefix: 'v'  # Uses v1.0.0 as the versioning format

      - name: Debug Changelog Output
        run: |
          echo "New Version: ${{ steps.changelog.outputs.newVersion }}"

      # Step 3: Update pyproject.toml version
      - name: Update pyproject.toml version
        if: steps.changelog.outputs.newVersion != ''
        run: |
          NEW_VERSION=$(jq -r '.version' package.json)
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml

      # Step 4: Commit the new version bump and changelog
      # us logged in user for user.name and user.email
      - name: Commit and Push Changes
        if: steps.changelog.outputs.newVersion != ''  # Only run if a new version was created
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com
          git add .
          git commit -m "chore(release): v${{ steps.changelog.outputs.newVersion }} [skip ci]"
          git tag -a v${{ steps.changelog.outputs.newVersion }} -m "chore(release): v${{ steps.changelog.outputs.newVersion }}"
          git push origin main --follow-tags

      # Step 4: Create a new GitHub release
      - name: Create Release
        if: steps.changelog.outputs.newVersion != ''  # Only run if a new version was created
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.changelog.outputs.newVersion }}  # Uses the tag created in the previous step
          release_name: Release v${{ steps.changelog.outputs.newVersion }}  # Uses the new version as the release name
          body_path: CHANGELOG.md  # Uses the changelog file as the release notes
          draft: false  # Create a full release (not a draft)
          prerelease: false  # This is a stable release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
